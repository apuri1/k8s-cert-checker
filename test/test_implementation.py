import queryk8s as cert_checker
import custommetrics as metric_checker
import requests
from threading import Condition
from datetime import datetime
from prometheus_client.exposition import generate_latest
import unittest
import sys
sys.path.append('..')


class TestCollector(unittest.TestCase):

    def test_evaluate_incorrect_base64_encoding(self):

        print('###test_evaluate_incorrect_base64_encoding')
        k8sdata = {}

        queryk8s = cert_checker.QueryK8s(Condition(), k8sdata)

        queryk8s.today = datetime.today()

        base64_encoded_cert = 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUYvekNDQStlZ0F3SUJBZ0lKQUs4OTkrVUFPMGtQTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdkTVFzd0NRWUQKVlFRR0V3SkhRakVMTUFrR0ExVUVDQXdDUjBJeER6QU5CZ05WQkFjTUJreHZibVJ2YmpFVE1CRUdBMVVFQ2d3SwpNVEI0UW1GdWEybHVaekVSTUE4R0ExVUVDd3dJVTJWamRYSnBkSGt4SmpBa0JnTlZCQU1NSFdsdWRHVnlibUZzCkxqRXdlQzV0ZVd4MGFUTm5hRGR3TkhndWJtVjBNU0F3SGdZSktvWklodmNOQVFrQkZoRnBkRUF4TUhoaVlXNXIKYVc1bkxtTnZiVEFlRncweE9EQTBNamN3T1RRNE5ERmFGdzB5T0RBME1qUXdPVFE0TkRGYU1Ic3hDekFKQmdOVgpCQVlUQWtkQ01Rc3dDUVlEVlFRSURBSkhRakVQTUEwR0ExVUVCd3dHVEc5dVpHOXVNUk13RVFZRFZRUUtEQW94Ck1IaENZVzVyYVc1bk1SRXdEd1lEVlFRTERBaFRaV04xY21sMGVURW1NQ1FHQTFVRUF3d2RhVzUwWlhKdVlXd3UKTVRCNExtMTViSFJwTTJkb04zQTBlQzV1WlhRd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJSwpBb0lDQVFDWEc3bFkyaXo0Y1ZzMk5peUlUTmxMVld3ajRQVk1IU2RvSmFXMFZLUkdsYmRBVHNUQVV0MGVaWlk4CkZuWXZzRlh0SGRZMUE1V0pwNWk0eDNJWjlieDBEZ1d6YnA0d2pET1BrQyttWVZvbDV0aitBSkFNTUhHajY0NE0KNjFDYnVIdVVCVm1TOUFCT25DLzR3ejBjSk9qcWtVNTJKemZYMzFyYmFqRDVyZFFmaXpRZ1lkTUNxT0R4Qzg5MgpSNDJVSlprb3ZUWGNrYnBxMVMvbDZPMU1FOEZ5bjZYQlNiZnZuK0MzcE4rUzhhS1MvQVdKWTBXdG9NZzZZTFI1ClhtVG1PVnZZcTZuOG5vOGw4cVo0a2ZHUkNROTh3VFZRTWxEVlNPb1Rsb3lpWlh0YTVoelpGcS9DVmE4V3JOUjgKNTEyTEdSUFhRb2pvdXc4aXQybHl3dys0bHBodHNBL2NvVzlJM2FnUHlXb3Q1d09JK0xzU0c2aGFJbE9JYmdHNQpVcmhST0NWc0dDM1plQ25lYWVnNi9HUW9heDJ6UUFqUE9XQjc3bXgxNFNzRTB4WnB1VFFPZi82U1RHMDJISlhkCmw1TS9mNG9iMVdtaUFPbXVaWUhBMldEUjUwUGhtck1uVVY3TmdwWU9XSS9zQyt1cExNUnpLbVZMdTR2ZFlwVWEKdVRGRDVvaitBbEt5RGFyY0RLMW5sYjBZL3VRakZQbmZYRnZpeE1NVUtrcDdsZnUxUGdCUnQzWk1lNWxvWDYrQwo1VkVpUTFSZmtFUjFNSkpQNDNtOHpmOXYrUWhFbzNCUWhtYko1N3RZN0NwUTB6dVlZRVQvU3JjRjN3aVhtbjdwCkpuTXFNNjlPdHcveTVHL2F0OEl4d1B6SW40a1VDRVJ4T3VLdnpCOEpJUVdpcTJnRC93SURBUUFCbzJNd1lUQWQKQmdOVkhRNEVGZ1FVT1hUZElwSXBFcENjNkdDRTZJaStmc3BYTlI4d0h3WURWUjBqQkJnd0ZvQVV0UEFyL2hyUgpUNmlXUWVZcUUzQ2JiT2ZhdUdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBWVl3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFCWkNJa250RVVZVlQ4ZHM0LzV4ZmJ1VHMvcytrUXFNQWlrakpTYVQKZHNOclQxeVJZSWZPL1d6SzFVUUZPaCs2c2JzT3YwYlZmYU02UWE3RU1sV3lBaC9LZTZPV2FwQmkzWmc4MjN1WQpZK0hmMW1ZcVA1NHk1cEhlakxZTnhUbUp3K056UnVtK1dVZU02Uk5iZW1YT2VrajdhOE5hTGRjbGVEdmtHNmlrCmVsbzdaN2tnemlkMjFCU2Z4V0xRTEloUzdOeGVxMC9HM3JVbTU2WGQvd1lwYnVFMWlMV1ZqekN2cHRaRVB2MTgKNUJjVlNSN1pwYmlsRnVITDMxMHhEa0wxSjgvVnNoMS9tQVp4MkFablo4VjNpdFMxSWROcU5ObGZ4bUVaKzBDcApSbHAzdmFmUng3RHdyRTh5Yjg2cWdoSGhkTWpJS2duZW1XWUtMYVpUcmhmUFFzVlI0UzdvMWd6Q3B5UEVPTm9zClV0QXc1Qi9vMkJ1M3VkLzJjVjd2eXFyT25QTUZwTWpPSjJRODZFL1ZJUEowQkRoeEJDUnhKQU12WlRlcVFubFAKNXYvTEYwcmdwS252YmtRWlQ2WnFIWTd5OTN6VDdjNWh0MUJDaUZDMlNmYnhVRXNIb1VRUVc1M2ZKK1BGcUVvYgpXNTE0UUFjZmpabXZmVXh3OEp3WmRiY2FyUGZmMHlYcCs2MHh5R3JCU3dkV25vaDFOamVTeFA5UFhGZ0pIcFVPCjg3R204VFduYisvUno1R3g1SHdiaTBwTFlZMmVQVGFqaGFEQTRPWW51eDhLZVliSlJ2Vk9KVWhvR3VYL3drMXcKRXgwZjFlc0ZIeUVxenN0NDhYeERCMFgrZ1NJb0Ewc3d3TWczRzRXU0F4MGVSTWZpRmpyU2pHMlJtbHBVbmZDTQpnVUVnCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdEekNDQS9lZ0F3SUJBZ0lKQUxWSEZkbkdBa3JJTUEwR0NTcUdTSWIzRFFFQkRRVUFNSUdkTVFzd0NRWUQKVlFRR0V3SkhRakVMTUFrR0ExVUVDQXdDUjBJeER6QU5CZ05WQkFjTUJreHZibVJ2YmpFVE1CRUdBMVVFQ2d3SwpNVEI0UW1GdWEybHVaekVSTUE4R0ExVUVDd3dJVTJWamRYSnBkSGt4SmpBa0JnTlZCQU1NSFdsdWRHVnlibUZzCkxqRXdlQzV0ZVd4MGFUTm5hRGR3TkhndWJtVjBNU0F3SGdZSktvWklodmNOQVFrQkZoRnBkRUF4TUhoaVlXNXIKYVc1bkxtTnZiVEFlRncweE9EQTBNalV4TlRJek1UUmFGdzB5T0RBME1qSXhOVEl6TVRSYU1JR2RNUXN3Q1FZRApWUVFHRXdKSFFqRUxNQWtHQTFVRUNBd0NSMEl4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVUTUJFR0ExVUVDZ3dLCk1UQjRRbUZ1YTJsdVp6RVJNQThHQTFVRUN3d0lVMlZqZFhKcGRIa3hKakFrQmdOVkJBTU1IV2x1ZEdWeWJtRnMKTGpFd2VDNXRlV3gwYVRObmFEZHdOSGd1Ym1WME1TQXdIZ1lKS29aSWh2Y05BUWtCRmhGcGRFQXhNSGhpWVc1cgphVzVuTG1OdmJUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU5TT0I1MHZOMEpjCklEOE9iQTM5Qms2ZGZaNjdwTHptR3kraXhPdXp1ajlmSXNEdjU4WUV6cU9DcXVwUUtuWHphYVgzTy9ncWh3VzIKcUlFcmtsZ1V1S2M4bC85Z0oyM1A5TklaRGxuaC9ZNHdXT0ZtMURkUnVmcjlySHBDSjM2dWk2RUVaVW5QUXZ0MQo0VlJJVldoanZSTDk1Q0NhNXg0VUlIbldKaVBrTVArMmNUUk14ZWd0VVJVeCtlclN2cDA3UFFTSXEzQ0JpVDAyCk4wNTdFM0xJK1A1QlczK2FQOHdDcE82TlJRTXFISnFKWmZadW1qYTI0U2R3aE8wT1ovWUNERXlsb2RCWVh1cWIKcGlPWHB2WDJlcXo4MjJjeWZ2aExZNm1JL0xxN3lrMDNVaHVYOUR2SXVmaGtsRThLcnd3SkVrOEs2cUxxZG9RMgpyOE1iM0o3WEJpM0NZRkZxRHpIdEpMTWNHbHhlMmFMbENsMTEvRG1FUTVJazNhY25FS2NJTUtoZWJIcXdEckQwCklydFpVd1ZnbkhRNkZPeEVaalppbTgxcTlBYlZHVTJVWktBUFFsa2ZYdUFZc01WeEYvWHl4Zk9FblFwMmxCTkoKOTg2dnlURXRpUklhVE1wSnRIa1NRd0xReHYvaU5OYmphMnJaTlNhM3hUTmVGcXFyTWdLejAzRVZoZkZRSjVPVgowdCs3Q3Z6UkJpY1NLWHB4aTF3SGNhbVg2ZVppZHZXNWZ4WjRHeTNXUlNUYjV1eExsNStnZ29waksrdDZ3UVQwCm1pWWRZbWpmcWN4eEVvRXdpd1FwNG1Qa3FiaTlaN0xZQWtMOEpGRGI0cW1jL3VENEE0VkpJa0JJYUt4OFRwdTcKVTB4MFU2OFZMcDkyQUowQThWdnpvQkRESk9lL1VoQ3pBZ01CQUFHalVEQk9NQjBHQTFVZERnUVdCQlMwOEN2KwpHdEZQcUpaQjVpb1RjSnRzNTlxNFlqQWZCZ05WSFNNRUdEQVdnQlMwOEN2K0d0RlBxSlpCNWlvVGNKdHM1OXE0CllqQU1CZ05WSFJNRUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkRRVUFBNElDQVFCUW0rajhvU05ZRmdpWm9jWnYKcDhrOHQvcUVsaWt5NXM3OU5Vd3pBT1p2RFVTREZ0aVJKTFIrS09wSnJJZXd2WWdYSEdRbHlrTHJBZTBqSlF4UQoxemRyNWFOYjhscGFRZVQ2QjI3WEVGMXlZY3MvWXh3UmFWcStBYVQ5ZWZXdVBXcHAyOWwrT0FyTU9IdlRjVXcrC

        self.assertEqual(queryk8s.evaluate(
            'dummy_namespace', 'dummy_cert', 'dummy.pem',
            base64_encoded_cert), -1)

        self.assertFalse(bool(queryk8s.k8sdata))

    def test_evaluate_bad_cert(self):

        print('###test_evaluate_bad_cert')

        k8sdata = {}

        queryk8s = cert_checker.QueryK8s(Condition(), k8sdata)

        queryk8s.today = datetime.today()

        base64_encoded_cert = 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFNU1URXhNekE1TlRBek9Wb1hEVEk1TVRFeE1EQTVOVEF6T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUlzCkdOUXhlMVBoYThqa25vaTlWM3k1aDlzNy9YbThDb0I3am9oR0JGWGs1dm1yKzNWVUl2aFpXemVONmI5ZGgxTnYKZlpEdkFkZC9KenFGeHJQVnhxY1lsTWk3Z3k3cHJYQzN1MVVIamlORHNhYlBYdUgyak5oMWtnRCtUTGNHNCtBWgpSWFJqUUgweU41a2MyZW52cFV1Sm9qUTA3WkdVc3FwdXU5aXpaMTIvclhKTHA1WTJwYVVTQVpuYkYzME80QXFoCkdMbW1Najl6bGViZnYxU0Zod2NSTW9vc3RBa0dRZTYwNnNHNmJiUVA2amwrZWZYWEtmK1RPdTFBTzdKbldSOUIKandZd2p5K1lJRmtSRE5wcU5BckVUQzdLb1NLRmJvZDFZSUI3OE1iQ05GZmRMR2ZiMDVoaFc3TGo5ajJGdTZXOQpaTkM2bkNCdUtKWkJFMEtPVUhjQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFakZ1blQzN1BJUzBXQWpTL1Y3MWhTclI3UzYKVHFWL2p1aU1XaGlkV2tzc3FFUmdPd2ZnZ29iVWFqb005WDZUYlc1OXFVS0tIM3lZbEZuaTNITGFYSnh4a0lkdgpVTjQ1UXc2cjdmODNzbjRoS2xWTEFmRlZMS2ZWbWhhRWVhd2pWWnlMY2lnOW5uMTZWQzlVWjF5ZHdtT0tDcTNLCnMzTy90elM3WkRKd29uRjB4am9YL0c1bzRNMkloOURUNDM0KzlTS01xRTVBeDNiQXpFSWdlVVpPODdZZ2QrSHUKYnFxN01keEZZWW1ORFkvUFZhWWVhVWRPSGNXbnR1TFV0RW9kUmdFRTloTjRTQTVCMDlXRk5GcnQwKzh3VUFsRwp5K3BUVGxwd1hUaHBGNFhNZGJsaGx4b08vQnE5czdkWFlRbGxoTDV2SEo0emxWUEcwOEZuaEtuY3V3Zz11cmdoCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'

        self.assertEqual(queryk8s.evaluate(
            'dummy_namespace', 'dummy_cert', 'dummy.pem',
            base64_encoded_cert), -1)

        self.assertFalse(bool(queryk8s.k8sdata))

    def test_evaluate_good_cert(self):

        print('###test_evaluate_good_cert')

        k8sdata = {}

        queryk8s = cert_checker.QueryK8s(Condition(), k8sdata)

        queryk8s.today = datetime.today()

        base64_encoded_cert = 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFNU1EZ3dOakV6TlRRMU5Wb1hEVEk1TURnd016RXpOVFExTlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT1ErCkt3aGt1a3BpZmhlb2E4cVhydjFIL2IwaS9jaUZaR3hMdkNkWVpkRzBwVVJSRGs2RFpub08wZ2w4Y1dkMXNWNkQKOWVFRU9jMituSmZMRlp5b3FLalFNS0Q2TExCRTdDSXdwRkxJT2tXVWc5ZDdnYzdwL0hiQWpacUpoajFidGNlUQpNU1hMQ2F0cGI1c25UK1JDWFEvc1Zibzg1TWxnN0dpbXFUVFh5L2xXY1BpdE1SRkdCVVpQVkpXQmFJcG1wZXhWCjgvTHlua3BOaWYvUjFZbVFTY2piQzBlcitPQlBLc2xmM2FXSUVsMmdKNTliN2RJNGV6dW5iS3hrZjNsY3ZJZ2IKZDdad1pJTHpoYlBNSGNjcFBsWldLSzF1U241dWNSZWpCK0N4UnVERDB4Z3JsaUxLa0ZtM3ZWUElOYnlrcFZlUApTZDFONDBRaEpjUjJVUGZlK2xrQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGamwxVi9xYzJHeUJTUmRJbVdFZ1lzSlc2ZjUKQVZpVlRZdDlkYS9CRXdyUTlRc1BpQVZNQjFHTUduM3U5bUNHdEpXVGkvVzkybnkzVkVTK2kxM2UzZVR2QW9rSwpMQ2U5YjFTRkxNK0tYem5kMi9qeGdzVGtielBxWVI1dUlEanFvZkd4Qk05L2cxczZTVmN5Q0t2eHc1dngwWWprCmJKVCs1Y1dDQ1dOR0FnaGFSZGxZbk9zeThscUxPSW9JNm5xcFBJNTJ5U2ptZmxSdE5OYXhIWk1NSnJDTnVHV0EKQWsyU0ozWVpSTjZQNGJydFNDYmtJTTcrYUxrczhoTVkreHp4ZlNibTA3TzNWK05yWEkzSHlILzNwVllBRk41Ugpha3FUa0tBdFNENGRuM0lOZk53eE15TUZqQUQvSlJnRldjVHFkUVRGTzhOaUEyYm1sbmhTOXh1SW0zMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='

        self.assertEqual(queryk8s.evaluate(
            'dummy_namespace', 'dummy_cert', 'dummy.pem',
            base64_encoded_cert), 0)

        self.assertTrue(bool(queryk8s.k8sdata))

    def test_collect_error_handling_no_metrics(self):
        print('###test_collect_error_handling_no_metrics')
        
        k8sdata = {}

        handling = metric_checker.CustomCollector(k8sdata)

        handling.collect()

    def test_collect_error_handling_malformed_metrics(self):
        print('###test_collect_error_handling_malformed_metrics')
        
        k8sdata = {}

        # Send a string instead of tuple
        k8sdata["foo"] = 66

        sample_metrics = metric_checker.CustomCollector(k8sdata)

        generate_latest(sample_metrics)

if __name__ == '__main__':
    unittest.main()